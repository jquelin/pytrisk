#!/bin/bash
#
# This file is part of pytrisk.
#
# pytrisk is free software: you can redistribute it and/or modify it
# under the # terms of the GNU General Public License as published by
# the Free Software # Foundation, either version 3 of the License, or
# (at your option) any later # version.
#
# pytrisk is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with pytrisk. If not, see <https://www.gnu.org/licenses/>.
#


localedir=pytrisk/locale
prevver=$(git tag |egrep '^v' | tail -1 |sed -e 's/v//')
prevmajor=$(echo $prevver |cut -d. -f1)
prevminor=$(echo $prevver |cut -d. -f2)
prevpatch=$(echo $prevver |cut -d. -f3)

log () {
    color=3
    tput setaf $color && echo "$1" && tput sgr 0
}

update_version () {
    newversion=$1
    log "updating to $newversion"
    perl -pi -E "s{version = .*}{version = '$newversion'}" pyproject.toml
}

case $1 in
    clean)
        log "** $1"
        rm -rf dist pytrisk.egg-info
        exit
        ;;

    build)
        $0 clean
        $0 mo
        log "** $1"
        python -m build
        exit
        ;;

    release)
        log "** $1"

        # check version has been updated
        log "- check version has been changed"
        curver=$(egrep 'version' pyproject.toml |cut -d\' -f2)
        if test $curver == $prevver
        then
            echo "current version $curver has not been changed"
            echo "aborting"
            exit 1
        fi

        # check untracked files
        log "- check untracked files"
        untracked=$(git ls-files --others --exclude-standard)
        if ! test -z "$untracked"
        then
            echo "untracked files: $(echo $untracked| tr -d "\n")"
            echo "aborting"
            exit 1
        fi

        # check dirty files
        log "- check dirty files"
        autocommit="CHANGES.md|pyproject.toml"
        dirty=$(git status --porcelain | egrep -v "$autocommit" |awk '{print $2}')
        if ! test -z "$dirty"
        then
            echo "dirty files: $(echo $dirty| tr -d "\n")"
            echo "aborting"
            exit 1
        fi

        # adding version + date to changelog
        sed -i "1s/^/$curver $(date +%F)\n\n/" CHANGES.md

        # autocommit
        log "- autocommitting"
        git ci -a -m "v$curver"
        log "- tagging v$curver"
        git tag "v$curver"
        #git push
        #git push --tags

        $0 build

        # finally, upload on pypi
        log "** $1"
        twine upload

        exit
        ;;

    # l10n
    pot)
        log "** $1"
        find pytrisk -name '*.csv' -o -name '*.py' | \
            xargs pygettext.py -p $localedir
        exit
        ;;

    mo)
        log "** $1"
        for po in $(find $localedir -name '*.po')
        do
            mo=$(echo $po | sed -e 's/\.po/.mo/')
            echo "$po -> $mo"
            msgfmt $po -o $mo
        done
        exit
        ;;

    # version update
    major)
        log "** $1"
        newmajor=$((prevmajor+1))
        newminor=0
        newpatch=0
        newversion="$newmajor.$newminor.$newpatch"
        update_version $newversion
        ;;

    minor)
        log "** $1"
        newmajor=$prevmajor
        newminor=$((prevminor+1))
        newpatch=0
        newversion="$newmajor.$newminor.$newpatch"
        update_version $newversion
        ;;

    patch)
        log "** $1"
        newmajor=$prevmajor
        newminor=$prevminor
        newpatch=$((prevpatch+1))
        newversion="$newmajor.$newminor.$newpatch"
        update_version $newversion
        ;;

    *)
        echo "unknown command"
        ;;
esac

