#!/usr/bin/python
#
# This file is part of pytrisk.
#
# pytrisk is free software: you can redistribute it and/or modify it
# under the # terms of the GNU General Public License as published by
# the Free Software # Foundation, either version 3 of the License, or
# (at your option) any later # version.
#
# pytrisk is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with pytrisk. If not, see <https://www.gnu.org/licenses/>.
#

import contextlib
import sys
import logging
import colorlog
import os
import shutil
import subprocess
import tomlkit
import typer

from pathlib import Path

app = typer.Typer(no_args_is_help=True)

# command definition

@app.command()
def build():
    log.info(f'*** build')
    subprocess.run(['python', '-m' , 'build'], check=True)

@app.command()
def clean():
    log.info(f'*** clean')
    for d in ['dist', 'pytrisk.egg-info']:
        log.debug(f'removing {d}')
        with contextlib.suppress(FileNotFoundError):
            shutil.rmtree(Path(rootdir, d))

@app.command()
def upload():
    log.info(f'*** build')
    # check git dirty state
    # check version has changed
    # git autocommit if needed
    # git tag
    subprocess.run(['twin', 'upload'], check=True)


# l10n

@app.command()
def pot():
    log.info('*** pot')
    pyfiles = []
    for root, dirs, files in os.walk(pytriskdir):
        for file in files:
            if file.endswith('.txt'):
                pyfiles.append(file)
    subprocess.run(['pygettext.py', '-p', localedir, *pyfiles], check=True)

@app.command()
def mo():
    for root, dirs, files in os.walk(localedir):
        for file in files:
            if file.endswith('.po'):
                pofile = Path(root, file).as_posix()
                mofile = pofile.replace('.po', '.mo')
                subprocess.run(['msgfmt', pofile, '-o', mofile])

# version update

@app.command()
def patch():
    log.info(f'*** patch')
    (x, y, z) = _previous_version().split('.')
    newver = f'{x}.{y}.{int(z)+1}'
    log.debug(f'new version: {newver}')
    toml['project']['version'] = newver
    toml_file.write_text(tomlkit.dumps(toml))

@app.command()
def minor():
    log.info(f'*** minor')
    (x, y, z) = _previous_version().split('.')
    newver = f'{x}.{int(y)+1}.0'
    log.debug(f'new version: {newver}')
    toml['project']['version'] = newver
    toml_file.write_text(tomlkit.dumps(toml))

@app.command()
def major():
    log.info(f'*** major')
    (x, y, z) = _previous_version().split('.')
    newver = f'{int(x)+1}.0.0'
    log.debug(f'new version: {newver}')
    toml['project']['version'] = newver
    toml_file.write_text(tomlkit.dumps(toml))


#
def _previous_version():
    from git import Repo
    repo = Repo(rootdir)
    tags = sorted(repo.tags, key=lambda t: t.commit.committed_datetime)
    previous = str(tags[-1]).replace('v', '')
    log.debug(f'previous version: {previous}')
    return previous


# creating logging facility
log = logging.getLogger('pzil')
handler = colorlog.StreamHandler()
handler.setFormatter(colorlog.ColoredFormatter(
        '%(log_color)s%(message)s'))
log.setLevel(logging.DEBUG)
log.addHandler(handler)

# common vars
rootdir    = Path(__file__).parent
pytriskdir = Path(rootdir, 'pytrisk')
localedir  = Path(pytriskdir, 'locale')
toml_file = Path(rootdir, 'pyproject.toml')
toml = tomlkit.parse(toml_file.read_text())


# processing commands
app()
